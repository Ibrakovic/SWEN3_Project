/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.service;

import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.openapitools.model.DocumentsDocumentIdPutRequest;
import org.openapitools.model.DocumentsDocumentIdStatusGet200Response;
import org.openapitools.model.DocumentsSearchGet200ResponseInner;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-05T12:12:53.257010100+02:00[Europe/Vienna]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "documents", description = "the documents API")
public interface DocumentsApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * DELETE /documents/{documentId} : Delete a document
	 *
	 * @param documentId (required)
	 * @return Document deleted successfully (status code 204)
	 */
	@Operation(operationId = "documentsDocumentIdDelete", summary = "Delete a document", responses = {
			@ApiResponse(responseCode = "204", description = "Document deleted successfully") })
	@RequestMapping(method = RequestMethod.DELETE, value = "/documents/{documentId}")

	default ResponseEntity<Void> documentsDocumentIdDelete(
			@Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") String documentId) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * PUT /documents/{documentId} : Update a document&#39;s metadata
	 *
	 * @param documentId                    (required)
	 * @param documentsDocumentIdPutRequest (required)
	 * @return Document metadata updated (status code 200)
	 */
	@Operation(operationId = "documentsDocumentIdPut", summary = "Update a document's metadata", responses = {
			@ApiResponse(responseCode = "200", description = "Document metadata updated") })
	@RequestMapping(method = RequestMethod.PUT, value = "/documents/{documentId}", consumes = { "application/json" })

	default ResponseEntity<Void> documentsDocumentIdPut(
			@Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") String documentId,
			@Parameter(name = "DocumentsDocumentIdPutRequest", description = "", required = true) @Valid @RequestBody DocumentsDocumentIdPutRequest documentsDocumentIdPutRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * GET /documents/{documentId}/status : Check the status of the OCR processing
	 * Returns the current status of the OCR and indexing process for the specified
	 * document.
	 *
	 * @param documentId (required)
	 * @return Status of the OCR process (status code 200)
	 */
	@Operation(operationId = "documentsDocumentIdStatusGet", summary = "Check the status of the OCR processing", description = "Returns the current status of the OCR and indexing process for the specified document.", responses = {
			@ApiResponse(responseCode = "200", description = "Status of the OCR process", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = DocumentsDocumentIdStatusGet200Response.class)) }) })
	@RequestMapping(method = RequestMethod.GET, value = "/documents/{documentId}/status", produces = {
			"application/json" })

	default ResponseEntity<DocumentsDocumentIdStatusGet200Response> documentsDocumentIdStatusGet(
			@Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") String documentId) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"status\" : \"pending\" }";
					ApiUtil.setExampleResponse(request, "application/json", exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * POST /documents : Upload a document Uploads a document, performs OCR and
	 * indexes it in ElasticSearch.
	 *
	 * @param file (optional)
	 * @param tags (optional)
	 * @return Document uploaded and indexed (status code 201)
	 */
	@Operation(operationId = "documentsPost", summary = "Upload a document", description = "Uploads a document, performs OCR and indexes it in ElasticSearch.", responses = {
			@ApiResponse(responseCode = "201", description = "Document uploaded and indexed") })
	@RequestMapping(method = RequestMethod.POST, value = "/documents", consumes = { "multipart/form-data" })

	default ResponseEntity<Void> documentsPost(
			@Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file,
			@Parameter(name = "tags", description = "") @Valid @RequestPart(value = "tags", required = false) List<String> tags) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * GET /documents/search : Search for a document Full-text and fuzzy search in
	 * ElasticSearch.
	 *
	 * @param query (required)
	 * @return Search results (status code 200)
	 */
	@Operation(operationId = "documentsSearchGet", summary = "Search for a document", description = "Full-text and fuzzy search in ElasticSearch.", responses = {
			@ApiResponse(responseCode = "200", description = "Search results", content = {
					@Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DocumentsSearchGet200ResponseInner.class))) }) })
	@RequestMapping(method = RequestMethod.GET, value = "/documents/search", produces = { "application/json" })

	default ResponseEntity<List<DocumentsSearchGet200ResponseInner>> documentsSearchGet(
			@NotNull @Parameter(name = "query", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "[ { \"document_id\" : \"document_id\", \"content\" : \"content\", \"tags\" : [ \"tags\", \"tags\" ] }, { \"document_id\" : \"document_id\", \"content\" : \"content\", \"tags\" : [ \"tags\", \"tags\" ] } ]";
					ApiUtil.setExampleResponse(request, "application/json", exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

}
